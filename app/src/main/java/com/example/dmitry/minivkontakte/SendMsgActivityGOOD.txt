package com.example.dmitry.minivkontakte;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.PopupMenu;
import android.util.Base64;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;


import com.vk.sdk.VKAccessToken;
import com.vk.sdk.VKScope;
import com.vk.sdk.VKSdk;
import com.vk.sdk.VKSdkListener;
import com.vk.sdk.VKUIHelper;
import com.vk.sdk.api.VKApi;
import com.vk.sdk.api.VKError;
import com.vk.sdk.api.VKParameters;
import com.vk.sdk.api.VKRequest;
import com.vk.sdk.api.VKResponse;
import com.vk.sdk.api.photo.VKImageParameters;
import com.vk.sdk.api.photo.VKUploadImage;
import com.vk.sdk.dialogs.VKCaptchaDialog;


import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;



public class SendMsgActivity extends ActionBarActivity {
    private static final String TAG = "SendMsgActivity";
    private static final String VK_APP_ID = "4812279";
    public static final String[] scopes = new String[] {
            VKScope.FRIENDS,
            VKScope.MESSAGES,
            VKScope.PHOTOS,
            VKScope.OFFLINE,
            VKScope.NOHTTPS
    };

    public static final String EXTRA_USER = "org.example.vkauth.user";
    private static final int REQUEST_PHOTO = 0;
    private static final int REQUEST_FILE = 1;
    private static final int UPLOAD_TASK = 2;

    private boolean isCamAvailable = true;

    private User mUser;
    private BitmapDrawable newIcon = null;
    private static Handler uploadHandler;

    private ImageView mImagePhoto;
    private TextView mTextName;
    private TextView mTextBirth;
    private EditText mEditMsg;
    private Button mButtonSend;
    private ImageView mImageChoose;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // скрыть заголовок окна
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        // скрыть панель состояния
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_send_msg);

        mUser = getIntent().getParcelableExtra(EXTRA_USER);
        setTitle(mUser.getName());

        Toast.makeText(getApplicationContext(), "User info: " + "id: " + mUser.getId(), Toast.LENGTH_LONG).show();

        mImagePhoto = (ImageView)findViewById(R.id.send_photo);
        if (mUser.getPhoto() != null) {
            mImagePhoto.setImageBitmap(mUser.getPhoto());
        } else {
            mImagePhoto.setImageResource(R.drawable.not_found);
        }

        mTextName = (TextView)findViewById(R.id.send_name);
        mTextName.setText(mUser.getName());

        mTextBirth = (TextView)findViewById(R.id.send_birth);
        mTextBirth.setText(mUser.getBirth());

        mEditMsg = (EditText)findViewById(R.id.send_message);

        mButtonSend = (Button)findViewById(R.id.send_button);
        mButtonSend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (newIcon != null) {
                    uploadAndSend(newIcon);
                } else {
                    sendMessage(String.valueOf(mUser.getId()), mEditMsg.getText().toString(), null);
                }

                Toast toast = Toast.makeText(getApplicationContext(), "Message sended", Toast.LENGTH_LONG);
                toast.show();
            }
        });



        PackageManager pm = SendMsgActivity.this.getPackageManager();
        if (!pm.hasSystemFeature(PackageManager.FEATURE_CAMERA) &&
                !pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)) {
            isCamAvailable = false;
        }

        mImageChoose = (ImageView)findViewById(R.id.choose_res);
        mImageChoose.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // если камеры нет, то выбрать из галереи
                if (isCamAvailable) {
                    showPopupMenu(v);
                } else try {
                    getFromGallery(v);
                } catch (Exception e) {}
            }
        });

        VKSdk.authorize(scopes);
        VKSdk.initialize(sdkListener, VK_APP_ID);
        VKUIHelper.onCreate(this);

        if (!VKSdk.wakeUpSession()) {
            mButtonSend.setEnabled(false);
        }
    }


    private void getFromGallery(View v) throws Exception  {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("image/*");
        startActivityForResult(intent, REQUEST_FILE);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        VKUIHelper.onActivityResult(this, requestCode, resultCode, data);

        if (resultCode != Activity.RESULT_OK)
            return;

        // по resultCode получаем путь к файлу
        String path = null;
        if (requestCode == REQUEST_PHOTO) {
            String filename = data.getStringExtra(CameraActivity.EXTRA_PHOTO_FILENAME);
            if (filename != null) {
                path = SendMsgActivity.this.getFileStreamPath(filename).getAbsolutePath();
            }
        } else if (requestCode == REQUEST_FILE) {
            Uri fileUri = data.getData();
            if (fileUri != null) {
                path = uriToPath(SendMsgActivity.this, fileUri);
            }
        }

        // и устанавливаем в качестве новой иконки
        if (path != null) {
            newIcon = PictureUtils.getScaledDrawable(SendMsgActivity.this, path);
            mImageChoose.setImageDrawable(newIcon);
        }
    }

    public static String uriToPath(Context context, Uri contentUri) {
        Cursor cursor = null;
        try {
            String[] proj = { MediaStore.Images.Media.DATA };
            cursor = context.getContentResolver().query(contentUri, proj, null, null, null);
            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    private void showPopupMenu(final View v) {
        PopupMenu popupMenu = new PopupMenu(this, v);

        // сокращенный вариант - только для android 4.0 и выше
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            popupMenu.inflate(R.menu.menu_source);
        } else {
            popupMenu.getMenuInflater().inflate(R.menu.menu_source, popupMenu.getMenu());
        }

        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.menu_camera:
                        Intent i = new Intent(SendMsgActivity.this, CameraActivity.class);
                        startActivityForResult(i, REQUEST_PHOTO);
                        return true;
                    case R.id.menu_gallery:
                        try {
                            getFromGallery(v);
                        } catch (Exception e) {}
                        return true;
                    default:
                        return false;
                }
            }
        });
        popupMenu.show();
    }

    @Override
    public void onBackPressed() {
        new AlertDialog.Builder(SendMsgActivity.this)
                .setTitle(R.string.back_or_quit_title)
                .setMessage(R.string.back_or_quit)
                .setPositiveButton(R.string.back,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                // вернет к списку друзей
                                SendMsgActivity.this.finish();
                            }
                        })
                .setNegativeButton(android.R.string.ok,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                new OpenBrowserTask(SendMsgActivity.this);

                                // выход из приложения
                                Intent i = new Intent(Intent.ACTION_MAIN);
                                i.addCategory(Intent.CATEGORY_HOME);
                                i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                startActivity(i);

                                finish();
                            }
                        })
                .create()
                .show();
    }



    @Override
    protected void onResume() {
        super.onResume();
        VKUIHelper.onResume(this);
    }

    @Override
    protected void onDestroy() {
        //new OpenBrowserTask(SendMsgActivity.this);

        super.onDestroy();
        VKUIHelper.onDestroy(this);
        if (sendRequest != null) {
            sendRequest.cancel();
        }
    }



    private VKRequest sendRequest;
    private JSONArray uploadResponse = null;

    private String att;

    private String uploadAndSend(BitmapDrawable bmpd) {
        att = null;
        final Bitmap file = bmpd.getBitmap();

        uploadHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case UPLOAD_TASK:
                        SendMsgActivity.this.sendMessage(
                                String.valueOf(mUser.getId()),
                                mEditMsg.getText().toString(),
                                att);
                        break;
                    default:
                        break;
                }
            }
        };

        Thread uploadThread = new Thread(new Runnable() {
            @Override
            public void run() {
                VKRequest uploadRequest = VKApi.uploadMessagesPhotoRequest(new VKUploadImage(file, VKImageParameters.jpgImage(0.9f)));
                uploadRequest.executeWithListener(new VKRequest.VKRequestListener() {
                    @Override
                    public void onComplete(VKResponse response) {
                        super.onComplete(response);
                        Log.i(TAG, "It's ok! " + response);

                        try {
                            uploadResponse = response.json.getJSONArray("response");
                            Log.i(TAG, "uploadResponse: " + uploadResponse.toString());

                            //att = uploadResponse.getString(0);

                            JSONParser postResponseParser = new JSONParser();
                            JSONArray postObject = ((JSONArray) postResponseParser.parse(uploadResponse.toString()));
                            Log.i(TAG, "postObject: " + postObject.toString());

                            String owner = postObject.toString().substring(221);
                            String owner_id = owner.substring(0, owner.indexOf(","));
                            String media = postObject.toString().substring(93);
                            String media_id = media.substring(0, media.indexOf(","));

                            att = "photo" + owner_id + "_" + media_id;

                            Log.i(TAG, "att: " + att);
                        } catch (JSONException e) {
                            e.printStackTrace();
                            Log.i(TAG, "exc: " + e);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        uploadHandler.sendEmptyMessage(UPLOAD_TASK);;
                    }

                    @Override
                    public void onError(VKError error) {
                        super.onError(error);
                        Log.i(TAG, "Error! " + error);
                        uploadHandler.sendEmptyMessage(UPLOAD_TASK);
                    }
                });

            }
        });
        uploadThread.start();

        return att;
    }

    private void sendMessage(String id, String message, String attachment) {
        if (sendRequest != null) {
            sendRequest.cancel();
        }

        VKParameters params;
        if (attachment == null) {
            params = VKParameters.from("user_id", id, "message", message);
        } else {
            Log.i(TAG, "att: " + attachment);
            params = VKParameters.from("user_id", id, "message", message, "attachment", attachment);
        }

        sendRequest = new VKRequest("messages.send", params);
        sendRequest.executeWithListener(new VKRequest.VKRequestListener() {
            @Override
            public void onComplete(VKResponse response) {
                super.onComplete(response);
                Log.d("VkDemoApp", "onComplete " + response);
            }
        });
    }
}
